<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="orderMapper">



 
    <resultMap type="Order" id="order_rm">
        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
     <id property = "orderNo" column="ORDER_NO"/>
     <!-- 나머지 일반 컬럼 -->
      <result property="memberNo" column="MEMBER_NO" />
      <result property="orderDate" column="ORDER_DATE" />
      <result property="orderStatus" column="ORDER_STATUS" />
      <result property="invoiceNo" column="INVOICE_NO" />
      <result property="orderPrice" column="ORDER_PRICE" />
      <result property="orderAddress" column="ORDER_ADDRESS" />
      <result property="impUid" column="IMP_UID" />
      
      
     <collection property="productList" 
		  javaType="java.util.ArrayList" ofType="Product"
		  select="selectProductList"
		  column = "{orderNo=ORDER_NO, memberNo=MEMBER_NO}"/>
  </resultMap>
  
    <resultMap type="Order" id="order_rm2">
        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
     <id property = "orderNo" column="ORDER_NO"/>
     <!-- 나머지 일반 컬럼 -->
      <result property="orderPrice" column="ORDER_PRICE" />
      <result property="impUid" column="IMP_UID" />
      
  </resultMap>
  
  <!-- 팜팜 상품 resultMap -->
 <resultMap type="Product" id="product_rm">
        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
     <id property = "productNo" column="PRODUCT_NO"/>
     <!-- 나머지 일반 컬럼 -->
      <result property="productName" column="PRODUCT_NAME" />
      <result property="productPrice" column="PRODUCT_PRICE" />
      <result property="productAmount" column="PRODUCT_AMOUNT" />
      <result property="productImg" column="PRODUCT_IMG" />       			  
      <result property="wishDate" column="WISH_DATE" />       			  
      <result property="reviewCheck" column="REVIEW_CHECK" />       			  
      <result property="productStatus" column="PRODUCT_STATUS" />       			  
      <result property="returnNo" column="RETURN_NO" />
  </resultMap>
  

 
<!-- 주문 하나 조회 -->
<select id="selectOrder" resultMap="order_rm">
		SELECT DISTINCT o.ORDER_NO , o.ORDER_DATE , ORDER_STATUS, MEMBER_NO
		,TO_CHAR(ORDER_PRICE, '999,999,999,999') ORDER_PRICE
		,(SELECT INVOICE_NO FROM ORDER_SHIPPING os WHERE os.ORDER_NO = o.ORDER_NO) INVOICE_NO
	FROM "ORDER" o
	JOIN ORDER_PRODUCT op ON(o.ORDER_NO = op.ORDER_NO)
	WHERE o.ORDER_NO = #{orderNo}
	ORDER BY ORDER_NO DESC
</select>

<!-- 주문한 상품 목록 조회 -->
<select id="selectProductList" resultMap="product_rm">
	SELECT op.PRODUCT_NO , op.PRODUCT_AMOUNT, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_STATUS,
		(SELECT PRODUCT_IMG_ADDRESS 
		FROM PRODUCT_IMG pi3 
		WHERE pi3.PRODUCT_NO = op.PRODUCT_NO 
		AND PRODUCT_IMG_ORDER = 0) PRODUCT_IMG,
		(SELECT COUNT(*) FROM REVIEW r 
		WHERE PRODUCT_NO = op.PRODUCT_NO AND MEMBER_NO = #{memberNo}) REVIEW_CHECK
	FROM ORDER_PRODUCT op 
	JOIN PRODUCT p ON (op.PRODUCT_NO = p.PRODUCT_NO)
	WHERE ORDER_NO = #{orderNo}
	AND PRODUCT_STATUS = 0
</select>

<!-- 반품 등록 -->
<insert id="insertReturn" useGeneratedKeys="true">
	<selectKey keyProperty="returnNo" resultType="_int" order="BEFORE">
		SELECT SEQ_RETURN_NO.NEXTVAL FROM DUAL
	</selectKey>

	INSERT INTO RETURN
	VALUES(#{returnNo}, #{orderNo}, DEFAULT, #{returnReason}, #{accountName}, #{accountNo})
</insert>

<!-- 반품 상품 등록 -->
<insert id="insertReturnProduct">
       	INSERT INTO RETURN_PRODUCT
       	VALUES(#{returnNo}, #{productNo}, #{productAmount})
 </insert>
 
 <!-- 상품 상태 변경 -->
 <update id="updateProductStatus">
 	UPDATE ORDER_PRODUCT SET
 	PRODUCT_STATUS = 1
 	WHERE PRODUCT_NO = #{productNo} 
 </update>
 
 <!-- 주문 등록 -->
 <insert id="insertOrder" useGeneratedKeys="true">
	<selectKey keyProperty="orderNo" resultType="_int" order="BEFORE">
		SELECT SEQ_ORDER_NO.NEXTVAL FROM DUAL
	</selectKey>
	
 	INSERT INTO "ORDER"
 	VALUES(#{orderNo}, DEFAULT, #{memberNo}, 0, #{orderPrice}, #{orderAddress})
 </insert>
 
 <!-- 주문 결제 정보 등록 -->
 <insert id="insertOrderPayment">
 	INSERT INTO ORDER_PAYMENT
 	VALUES(#{orderNo}, #{impUid})
 </insert>
 
 <!-- 주문 상품 등록 -->
 <insert id="insertProduct">
 	INSERT INTO ORDER_PRODUCT
 	VALUES(#{orderNo}, #{productNo}, #{productAmount}, 0)
 </insert>
 
 <!-- 재고 변동 히스토리 등록 -->
 <insert id="insertStockHistory">
 	INSERT INTO STOCK_HISTORY
 	VALUES(SEQ_STOCK_NO.NEXTVAL, #{productAmount}, DEFAULT, #{productNo},  1)
 </insert>
 
 <!-- 주문 취소 -->
 <update id="orderCancel">
 	UPDATE "ORDER" SET
 	ORDER_STATUS = 2
 	WHERE ORDER_NO = #{orderNo}
 </update>
 
 <select id="cancelProductList" resultMap="product_rm">
 	SELECT PRODUCT_NO, PRODUCT_AMOUNT FROM ORDER_PRODUCT op 
	WHERE ORDER_NO = #{orderNo}
 </select>
 
 <insert id="cancelHistory">
 	INSERT INTO STOCK_HISTORY VALUES(SEQ_STOCK_NO.NEXTVAL, #{productAmount}, DEFAULT, #{productNo}, 4)
 </insert>
 
 <!-- 해당 주문 아이디, 가격 조회 -->
 <select id="selectImpUid" parameterType="_int" resultMap="order_rm2">
 	SELECT ORDER_NO, IMP_UID, ORDER_PRICE
	FROM ORDER_PAYMENT
	JOIN "ORDER" USING(ORDER_NO)
 	WHERE ORDER_NO = #{orderNo}
 </select>
 
 <!-- 일주일이상 된 주문 구매 확정 -->
 <update id="orderConfirm">
 	UPDATE "ORDER" 
 	SET ORDER_STATUS = 3 
 	WHERE ORDER_STATUS IN(0,1)
 	AND CURRENT_DATE - ORDER_DATE >= 7
 </update>
 
  
  
</mapper>