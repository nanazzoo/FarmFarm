<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chat2Mapper">


	 <resultMap type="Chat2Room" id="chat2Room_rm">
	        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
	     <id property = "roomNo" column="ROOM_NO"/>
	     <!-- 나머지 일반 컬럼 -->
	      <result property="roomName" column="ROOM_NAME" />
	      <result property="roomType" column="ROOM_TYPE" />
	      <result property="roomStatus" column="ROOM_STATUS" />

	      <result property="enterNo" column="ENTER_NO" />
	      <result property="memberNo" column="MEMBER_NO" />
	      <result property="enterStatus" column="ENTER_STATUS" />
   	      <result property="lastReadChatNo" column="LAST_READ_CHAT_NO" />

	      <result property="memberNickname" column="MEMBER_NICKNAME" />
	      <result property="profileImg" column="PROFILE_IMG" />
	      
    	  <result property="thumbnailImg" column="THUMBNAIL_IMG" />
	      <result property="postTitle" column="POST_TITLE" />
	      
	      <result property="lastChatTime" column="LAST_CHAT_TIME" />
	      <result property="lastChatContent" column="LAST_CHAT_CONTENT" />
	      <result property="lastChatType" column="LAST_CHAT_TYPE" />
	      <result property="unreadChatCount" column="UNREAD_CHAT_COUNT" />
	 </resultMap>
	 
	 <resultMap type="Chat2" id="chat2_rm">
	        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
	     <id property = "chatNo" column="CHAT_NO"/>
	     <!-- 나머지 일반 컬럼 -->
	      <result property="roomNo" column="CHAT_NO" />
	      <result property="memberNo" column="MEMBER_NO" />
	      <result property="chatType" column="CHAT_TYPE" />
	      <result property="chatContent" column="CHAT_CONTENT" />
	      <result property="chatDate" column="CHAT_DATE" />
	      <result property="chatTime" column="CHAT_TIME" />
	      <result property="readCount" column="READ_COUNT" />
	      
	      <result property="memberNickname" column="MEMBER_NICKNAME" />
	      <result property="profileImg" column="PROFILE_IMG" />
     	  <result property="lastReadChatNo" column="LAST_READ_CHAT_NO" />

	 </resultMap>

	 <resultMap type="Chat2Img" id="chat2Img_rm">
	        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
	     <id property = "chatImgNo" column="CHAT_IMG_NO"/>
	     <!-- 나머지 일반 컬럼 -->
	      <result property="chatNo" column="CHAT_NO" />
	      <result property="chatImgOriginal" column="CHAT_IMG_ORIGINAL" />
	      <result property="chatImgRename" column="CHAT_IMG_RENAME" />
	      <result property="chatImgPath" column="CHAT_IMG_PATH" />
	 </resultMap>
	 
	 <resultMap type="Chat2Enter" id="chat2Enter_rm">
	        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
	     <id property = "enterNo" column="ENTER_NO"/>
	     <!-- 나머지 일반 컬럼 -->
	      <result property="roomNo" column="ROOM_NO" />
	      <result property="memberNo" column="MEMBER_NO" />
	      <result property="enterStatus" column="ENTER_STATUS" />
	      <result property="lastReadChatNo" column="LAST_READ_CHAT_NO" />
	      <result property="initialChatNo" column="INITIAL_CHAT_NO" />
	 </resultMap>
	 
 	 <resultMap type="Emoticon" id="emoticon_rm">
        <!-- DB에서 PK에 해당하는 필드, 컬럼을 작성하는 태그 -->
	     <id property = "emoticonCategoryNo" column="EMOTICON_CATEGORY_NO"/>
	     <!-- 나머지 일반 컬럼 -->
	      <result property="emoticonCategoryName" column="EMOTICON_CATEGORY_NAME" />
	      <result property="emoticonNo" column="EMOTICON_NO" />
	      <result property="emoticonName" column="EMOTICON_NAME" />
	 </resultMap>
	 

	
	<!-- 내 채팅방 목록 조회(SELECT) -->
	<select id="selectChatRoomList" parameterType="_int" resultMap="chat2Room_rm">
		SELECT *
		FROM (SELECT ROOM_NO, COUNT(MEMBER_NO) AS MEMBER_COUNT
					 FROM CHAT2_ENTER
					 GROUP BY ROOM_NO)
		------------------
		LEFT JOIN (SELECT ROOM_NO, C.CHAT_NO, C.CHAT_CONTENT AS LAST_CHAT_CONTENT, 
		      CASE WHEN TO_CHAR(C.CHAT_TIME, 'YYYY-MM-DD') = TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') 
				   THEN TO_CHAR(C.CHAT_TIME, 'AM HH"시" MI"분"')
				   ELSE TO_CHAR(C.CHAT_TIME, 'YYYY-MM-DD')
		   	  END LAST_CHAT_TIME, 
		      C.CHAT_TYPE AS LAST_CHAT_TYPE,
		      (SELECT COUNT(CHAT_NO) 
						 FROM CHAT2 C2
						 WHERE C.ROOM_NO = C2.ROOM_NO
						 AND CHAT_NO > (SELECT LAST_READ_CHAT_NO
						 				FROM CHAT2_ENTER C3
						 				WHERE MEMBER_NO = #{memberNo}
						 				AND C.ROOM_NO = C3.ROOM_NO
						 				AND ENTER_STATUS = 'Y')) AS UNREAD_CHAT_COUNT
		      FROM CHAT2 C
		      JOIN (SELECT MAX(CHAT_NO) AS LAST_CHAT_NO
		            FROM CHAT2
		            GROUP BY ROOM_NO) C_SUB ON (C_SUB.LAST_CHAT_NO = C.CHAT_NO)
			  WHERE (C.CHAT_TYPE = 'T' OR C.CHAT_TYPE = 'I' OR C.CHAT_TYPE = 'E') 
	  		  AND CHAT_TIME > TRUNC(CURRENT_DATE, 'dd') - 14) USING(ROOM_NO)
		------------------
		LEFT JOIN (SELECT ROOM_NO, ROOM_NAME, CR.ROOM_TYPE,
		   		     CASE WHEN ROOM_TYPE > 0 THEN (SELECT POST_TITLE 
		   		 							       FROM POST P 
		   		 							       WHERE CR.ROOM_TYPE=P.POST_NO)
		   		     ELSE NULL END POST_TITLE,
		   		     CASE WHEN ROOM_TYPE > 0 THEN (SELECT POST_IMG_ADDRESS 
		   						    	 	       FROM POST_IMG PIMG
		   						    	 	       WHERE POST_IMG_ORDER = 0 AND CR.ROOM_TYPE=PIMG.POST_NO)
		   		    ELSE NULL END THUMBNAIL_IMG 
		      FROM CHAT2_ROOM CR) USING(ROOM_NO)
		------------------
		LEFT JOIN (SELECT ROOM_NO, MEMBER_NO, ENTER_NO, ENTER_STATUS, INITIAL_CHAT_NO
		  		   FROM CHAT2_ENTER
		  		   WHERE ENTER_STATUS = 'Y' OR ENTER_STATUS = 'W') USING(ROOM_NO)
		WHERE MEMBER_NO = #{memberNo}
		ORDER BY CHAT_NO DESC NULLS LAST
	</select>
	
	<!-- 선택한 채팅방의 정보 조회 -->
	<select id="selectChatRoom" parameterType="_int" resultMap="chat2Room_rm">
		SELECT ROOM_NO, ROOM_NAME, ROOM_TYPE,
			   (SELECT POST_TITLE FROM POST P 
			    WHERE CR.ROOM_TYPE = P.POST_NO) AS POST_TITLE,
			   (SELECT POST_IMG_ADDRESS FROM POST_IMG PIMG 
			    WHERE CR.ROOM_TYPE = PIMG.POST_NO
			    AND POST_IMG_ORDER = 0) AS THUMBNAIL_IMG
		FROM CHAT2_ROOM CR
		WHERE ROOM_NO = #{roomNo}
	</select>

	<!-- 선택한 채팅방의 대화내용 조회(SELECT) -->
	<select id="selectChatList" parameterType="_int" resultMap="chat2_rm">
		SELECT ROOM_NO, CHAT_NO, CHAT_TYPE, CHAT_CONTENT, CHAT_TIME, READ_COUNT,
			   MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG,
	       	   CASE WHEN CHAT_TYPE='I' THEN (SELECT CHAT_IMG_PATH FROM CHAT2_IMG SUB WHERE MAIN.CHAT_NO = SUB.CHAT_NO)
	           ELSE NULL END CHAT_IMG_PATH
		FROM CHAT2 MAIN
		LEFT JOIN MEMBER USING(MEMBER_NO)
		WHERE ROOM_NO = #{roomNo}
		AND (CHAT_TYPE = 'T' OR CHAT_TYPE = 'I' OR CHAT_TYPE = 'E') 
		AND CHAT_NO > (SELECT INITIAL_CHAT_NO 
					   FROM CHAT2_ENTER 
					   WHERE ROOM_NO = #{roomNo}
					   AND MEMBER_NO = #{memberNo}
					   AND ENTER_STATUS = 'Y')
		AND CHAT_TIME > TRUNC(CURRENT_DATE, 'dd') - 14
		ORDER BY CHAT_NO
	</select>

	
	<!-- 새 채팅방 개설(INSERT) -->
	<insert id="insertNewChatRoom" useGeneratedKeys="true">
		INSERT INTO CHAT2_ROOM
		VALUES(SEQ_ROOM_NO.NEXTVAL, #{roomName}, #{roomType}, DEFAULT)
		<selectKey keyProperty="roomNo" resultType="_int" order="AFTER">
			SELECT SEQ_ROOM_NO.CURRVAL AS ROOM_NO FROM DUAL
		</selectKey>
	</insert>
	
	<!-- 새 채팅방 개설 전... 채팅방 존재 여부 체크 -->
	<select id="selectChatRoomExist" parameterType="_int" resultType="_int" >
		SELECT NVL(ROOM_NO,0) AS ROOM_NO 
		FROM (SELECT MAX(ROOM_NO) AS ROOM_NO
			  FROM CHAT2_ENTER
			  JOIN CHAT2_ROOM USING(ROOM_NO)
			  WHERE MEMBER_NO = #{memberNo}
			  AND ROOM_TYPE = #{roomType}
			  AND ENTER_STATUS = 'Y' 
			  ORDER BY ROOM_NO DESC)
		WHERE ROWNUM = 1
	</select>


	<!-- 채팅방 참가자 조회(SELECT) -->
	<select id="selectEnterMemberList" parameterType="_int" resultType="_int">
		SELECT MEMBER_NO FROM CHAT2_ENTER
		WHERE ROOM_NO = #{roomNo}
		AND ENTER_STATUS = 'Y'
	</select>
	
	<!-- 채팅방 참가자의 정보 조회(SELECT) -->
	<select id="selectChatRoomMemberList" parameterType="_int" resultMap="chat2Room_rm">
		SELECT ENTER_NO,
		 	  (SELECT MEMBER_NICKNAME FROM "MEMBER" M WHERE CE.MEMBER_NO = M.MEMBER_NO) AS MEMBER_NICKNAME,
		 	  (SELECT PROFILE_IMG FROM "MEMBER" M WHERE CE.MEMBER_NO = M.MEMBER_NO) AS PROFILE_IMG
		 FROM CHAT2_ENTER CE
		 WHERE ROOM_NO = #{roomNo}
		 AND ENTER_STATUS = 'Y'
	</select>
	
	
	<!-- 채팅방 수정(UPDATE) -->
	<update id="updateChatRoom">
		UPDATE CHAT2_ROOM SET ROOM_NAME = #{roomName}
		WHERE ROOM_NO = #{roomNo}
	</update>

	<!-- 채팅방 삭제(UPDATE) -->
	<update id="updateChatRoomStatus">
		UPDATE CHAT2_ROOM SET ROOM_STATUS = 0
		WHERE ROOM_NO = #{roomNo}
	</update>


	<!-- 채팅방 참가(INSERT) -->
	<insert id="insertChatEnter">
		INSERT INTO CHAT2_ENTER
		VALUES(SEQ_ENTER_NO.NEXTVAL, #{roomNo}, #{memberNo}, #{enterStatus},
				NVL((SELECT MAX(CHAT_NO) FROM CHAT2 WHERE ROOM_NO = #{roomNo}),0) ,
				NVL((SELECT MAX(CHAT_NO) FROM CHAT2 WHERE ROOM_NO = #{roomNo}),0) )
	</insert>
	
	<!-- 채팅방 초대(UPDATE) -->
	<update id="updateChatEnterApprove">
		UPDATE CHAT2_ENTER SET
		ENTER_STATUS = #{enterStatus}
		WHERE ENTER_NO = #{enterNo}
	</update>
	
	<!-- 채팅방 초대 중 중복 초대 확인 -->
	<select id="selectDuplicatInvite" parameterType="Chat2Enter" resultType="string">
		SELECT ENTER_STATUS
		FROM CHAT2_ENTER
		WHERE ROOM_NO = #{roomNo}
		AND MEMBER_NO = #{memberNo}
		AND (ENTER_STATUS = 'Y' OR ENTER_STATUS = 'W')
	</select>
	
	<!-- 채팅방 초대 승인 보조 : 방 번호 확인 -->
	<select id="selectRoomNoByEnterNo" parameterType="_int" resultType="_int">
		SELECT ROOM_NO
		FROM CHAT2_ENTER
		WHERE ENTER_NO = #{enterNo}
	</select>
	
	<!-- 채팅방 탈퇴(UPDATE) -->
	<update id="deleteChatEnter">
		UPDATE CHAT2_ENTER SET ENTER_STATUS = 'F'
		WHERE ROOM_NO = #{roomNo}
		AND MEMBER_NO = #{memberNo}
	</update>


	<!-- 채팅 전송(INSERT) -->
	<insert id="insertNewChat" useGeneratedKeys="true">
		INSERT INTO CHAT2
		VALUES(SEQ_CHAT_NO.NEXTVAL, #{roomNo}, #{memberNo}, #{chatType},
		       #{chatContent}, DEFAULT, DEFAULT)
		<selectKey keyProperty="chatNo" resultType="_int" order="AFTER">
			SELECT SEQ_CHAT_NO.CURRVAL AS CHAT_NO FROM DUAL
		</selectKey> 
	</insert>
	
	<!-- 채팅 이미지 저장(INSERT) -->
	<insert id="insertNewChatImg">
		INSERT INTO CHAT2_IMG
		VALUES(SEQ_CHAT_IMG_NO.NEXTVAL, #{chatNo}, #{chatImgOriginal},
		       #{chatImgRename}, #{chatImgPath})
	</insert>
	
	<!-- 시스템 메시지 전송(INSERT) -->
	<insert id="insertNewSystemChat">
		INSERT INTO CHAT2
		VALUES(SEQ_CHAT_IMG_NO.NEXTVAL, #{roomNo}, 0, 'S', #{chatContent}, DEFAULT, DEFAULT)
	</insert>	
	

	<!-- 채팅 삭제 처리(UPDATE) -->
	<update id="deleteChat">
		UPDATE CHAT2 SET CHAT_TYPE = 'D'
		WHERE CHAT_NO = #{chatNo}
		AND MEMBER_NO = #{memberNo}
	</update>
	
	
	<!-- 2. 입장 시 조회 처리 : UNREAD_CHAT_COUNT 0으로 만들기 J -->
	<update id="updateUnreadCount">
		UPDATE CHAT2_ENTER
		SET LAST_READ_CHAT_NO = (SELECT MAX(CHAT_NO)
								 FROM CHAT2
								 WHERE ROOM_NO = #{roomNo})
		WHERE MEMBER_NO = #{memberNo}
		AND ROOM_NO = #{roomNo}
	</update>
	
	
	<!-- 1. 입장 시 조회 처리 : n명 읽음 + 1 -->
	<update id="updateReadCount">
		UPDATE CHAT2
		SET READ_COUNT = READ_COUNT + 1
		WHERE ROOM_NO = #{roomNo}
		AND CHAT_NO > (SELECT LAST_READ_CHAT_NO
					   FROM CHAT2_ENTER
					   WHERE ROOM_NO = #{roomNo}
					   AND MEMBER_NO = #{memberNo}
					   AND ENTER_STATUS = 'Y')	
	</update>
	
	
	
	<!-- 이모티콘 카테고리 리스트 -->
	<select id="selectEmoticonCategoryList" resultMap="emoticon_rm">
		SELECT * FROM EMOTICON_CATEGORY
	</select>
	
	<!-- 이모티콘 리슽트 -->
	<select id="selectEmoticonList" parameterType="_int" resultMap="emoticon_rm">
		SELECT * FROM EMOTICON
		WHERE EMOTICON_CATEGORY_NO = #{emoticonCategoryNo}
	</select>
	
	<!-- 위젯 SQL 영역 -->
	
	<!-- 내 채팅방 목록 조회(LIMIT < 6) -->
	<select id="selectChatWidgetList" parameterType="_int" resultMap="chat2Room_rm">
		SELECT * 
		FROM (		
			SELECT *
			FROM (SELECT ROOM_NO, COUNT(MEMBER_NO) AS MEMBER_COUNT
						 FROM CHAT2_ENTER
						 GROUP BY ROOM_NO)
			------------------
			LEFT JOIN (SELECT ROOM_NO, C.CHAT_NO, C.CHAT_CONTENT AS LAST_CHAT_CONTENT, 
			      CASE WHEN TO_CHAR(C.CHAT_TIME, 'YYYY-MM-DD') = TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') 
					   THEN TO_CHAR(C.CHAT_TIME, 'AM HH"시" MI"분"')
					   ELSE TO_CHAR(C.CHAT_TIME, 'YYYY-MM-DD')
			   	  END LAST_CHAT_TIME, 
			      C.CHAT_TYPE AS LAST_CHAT_TYPE,
			      (SELECT COUNT(CHAT_NO) 
							 FROM CHAT2 C2
							 WHERE C.ROOM_NO = C2.ROOM_NO
							 AND CHAT_NO > (SELECT LAST_READ_CHAT_NO
							 				FROM CHAT2_ENTER C3
							 				WHERE MEMBER_NO = #{memberNo}
							 				AND C.ROOM_NO = C3.ROOM_NO
							 				AND ENTER_STATUS = 'Y')) AS UNREAD_CHAT_COUNT
			      FROM CHAT2 C
			      JOIN (SELECT MAX(CHAT_NO) AS LAST_CHAT_NO
			            FROM CHAT2
			            GROUP BY ROOM_NO) C_SUB ON (C_SUB.LAST_CHAT_NO = C.CHAT_NO)
				  WHERE (C.CHAT_TYPE = 'T' OR C.CHAT_TYPE = 'I' OR C.CHAT_TYPE = 'E') 
				  AND CHAT_TIME > TRUNC(CURRENT_DATE, 'dd') - 14 ) USING(ROOM_NO)
			------------------
			LEFT JOIN (SELECT ROOM_NO, ROOM_NAME, CR.ROOM_TYPE,
			   		     CASE WHEN ROOM_TYPE > 0 THEN (SELECT POST_TITLE 
			   		 							       FROM POST P 
			   		 							       WHERE CR.ROOM_TYPE=P.POST_NO)
			   		     ELSE NULL END POST_TITLE,
			   		     CASE WHEN ROOM_TYPE > 0 THEN (SELECT POST_IMG_ADDRESS 
			   						    	 	       FROM POST_IMG PIMG
			   						    	 	       WHERE POST_IMG_ORDER = 0 AND CR.ROOM_TYPE=PIMG.POST_NO)
			   		    ELSE NULL END THUMBNAIL_IMG 
			      FROM CHAT2_ROOM CR) USING(ROOM_NO)
			------------------
			LEFT JOIN (SELECT ROOM_NO, MEMBER_NO, ENTER_NO, ENTER_STATUS, INITIAL_CHAT_NO
			  		   FROM CHAT2_ENTER
			  		   WHERE ENTER_STATUS = 'Y' OR ENTER_STATUS = 'W') USING(ROOM_NO)
			WHERE MEMBER_NO = #{memberNo}
			ORDER BY CHAT_NO DESC NULLS LAST)
		<![CDATA[
			WHERE ROWNUM <= 6
		]]>
	</select>
	
	
</mapper>